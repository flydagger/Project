Part 1 : Introduction of the procedure of this program.

Compile and build the program : g++ -o Rainbow rainbow.cpp md5.h
Execute the program : ./Rainbow Passwords.txt

The program will generate 2 txt file : rainbow.txt , hashvalue_password_sample_fyx.txt
"rainbow.txt" stores the password and the hash value of each list of rainbow table generated by the program. There are about 3000 entries in this file.
"hashvalue_password_sample_fyx.txt" stores all the passwords included in the rainbow table and their corresponding hash value. There are about 12000 entries in this file.

At the beginning, it takes about 0.81s to initiate rainbow table (on banshee). You will see the following message : 
Initiating rainbow table takes 0.81 seconds.
0. EXIT
1. Search passwords

Then input 1, you will see a new message :
Input a hash value

Now input a hashvalue from "hashvalue_password_sample_fyx.txt" , such as :
"0fc54732b7e737b5ed770a7335baa398"
Its corresponding password is "gypsy".

In less than 0.01s, you will see the following message: 
The corresponding password is : gypsy
0. EXIT
1. Search passwords

Now input 1 again :
Input a hash value

Input a string which does not conform to the format of MD5's output, 32 bits in hex, such as "asdfghjkl".
The program will find that this string does not conform to the format and show the following message:
Hash value is incorrect
Input a hash value

Now you have to input a correct hashvalue or use command Ctrl + C to exit;
Let's get back to the interface of :
0. EXIT
1. Search passwords

If you wanna exit, input 0. Any other input besides '1' and '0' will make the program stay at this stage.

Have fun.

====================================================================

Part 2 : Introduction of the codes.

The code contains a main function and 4 other functions. 
H2D is used to transfer hex number to decimal number.
reduction is used to get an index of password by hashvalue.
searchRainbow is used to find the corresponding password by hashvalue.
hashCheck is used to check whether or not the hashvalue inputted by user conform to the correct format.

In main function, all passwords are read from a file and are stored in a vector. Then these passwords are used to create a rainbow table. However, in order to avoiding all collisions, only about 12000 passwords are covered by the rainbow table, which means the rainbow table contains about 3000 entries. 

After that, 2 txt files are created : rainbow.txt  hashvalue_password_sample_fyx.txt.
I have tested all hashvalue in "hashvalue_password_sample_fyx.txt" and all hashvalue are found.

Lastly, an interface is generated. User can search password according to the instruction in part 1.

PS : If you wanna cover more passwords, more reduction functions should be adopted.
